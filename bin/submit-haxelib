#!/bin/sh
#
# Bag and tag a release to haxelib

set -e

if [ $# -lt 1 ]; then
    echo "Usage: $0 VERSION"
    exit 1
fi

VERSION=$1
ARCHIVE=/tmp/haxelib.zip

FLAMBE_ROOT=`readlink -f $(dirname $0)/..`
cd $FLAMBE_ROOT

# Make sure the unit tests pass
cd tests
../bin/flambe-waf configure build
cd ..

rm -f $ARCHIVE

# Build the run.n that's executed by `haxelib run flambe`
cd haxelib
../bin/flambe-waf configure build
zip -j $ARCHIVE build/run.n
git ls-files template | zip $ARCHIVE -@
cd ..

git ls-files bin/flambe-waf bin/flambe-waf.bat bin/waf tools LICENSE.txt | zip $ARCHIVE -@

# Include the src directory's contents at the top-level to be nice to IDEs
cd src
git ls-files | zip $ARCHIVE -@
cd ..

# Process the haxelib.xml template and add it to the zip
sed -e s/{{VERSION}}/$VERSION/ etc/haxelib.xml > /tmp/haxelib.xml
zip -j $ARCHIVE /tmp/haxelib.xml

# Include our haxedoc.xml as well
bin/build-chxdoc
zip -j $ARCHIVE chxdoc/haxedoc.xml

# Now would be a good time to double-check everything works
haxelib test $ARCHIVE

read -p "Submit Flambe $VERSION to haxelib [Y/n]? " CONFIRM
case "$CONFIRM" in
    "Y" | "y" | "")
        git tag $VERSION
        haxelib submit $ARCHIVE
        ;;
esac
