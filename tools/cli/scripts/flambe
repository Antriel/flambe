#!/usr/bin/env python

import argparse
import flambe
import logging
import os
import sys
import yaml

PLATFORMS = ["html", "flash"]

logging.basicConfig(format="%(message)s")
logger = logging.getLogger("flambe")
logger.setLevel(logging.DEBUG)

def load_config (args):
    with open(args.config) as f:
        config = yaml.load(f)
        # Cope with empty config files
        if not config: config = {}
        return config

def on_new (args):
    flambe.new(args.path)
    logger.info("New Flambe app created in %s" % os.path.abspath(args.path))

def on_serve (args):
    server = flambe.Server()
    server.run()

def on_build (args):
    flambe.build(load_config(args), platforms=args.platforms, debug=args.debug)

def on_clean (args):
    flambe.clean()

parser = argparse.ArgumentParser()
parser.add_argument("--config", default="flambe.yaml")

subcommands = parser.add_subparsers(title="subcommands")

cmd = subcommands.add_parser("new")
cmd.add_argument("path")
cmd.set_defaults(func=on_new)

cmd = subcommands.add_parser("serve")
cmd.set_defaults(func=on_serve)

cmd = subcommands.add_parser("build")
cmd.add_argument("platforms", choices=PLATFORMS, nargs="+")
cmd.add_argument("--debug", action="store_true")
cmd.set_defaults(func=on_build)

cmd = subcommands.add_parser("clean")
cmd.set_defaults(func=on_clean)

args = parser.parse_args()
try:
    args.func(args)

except KeyboardInterrupt as e:
    pass

except (IOError, OSError) as e:
    logger.error("Could not open %s: %s" % (e.filename, e.strerror))
    sys.exit(1)

except flambe.FlambeException as e:
    if len(e.args) > 0: logger.error(e)
    sys.exit(1)
